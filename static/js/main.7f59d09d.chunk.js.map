{"version":3,"sources":["ducks/repoData.js","ducks/starredData.js","reducers/index.js","ducks/apiCallStatus.js","constants/status.js","components/Tabs/TabPanel.jsx","constants/apiInfo.js","thunks/handleRetrieveRepoData.js","components/Tabs/TabHeader.jsx","constants/loaderClass.js","components/Content/RepoCardContent.jsx","components/Content/RepoCardPage.jsx","components/Content/StarredCardPage.jsx","components/Content/Content.jsx","components/RepoApp.jsx","serviceWorker.js","index.js"],"names":["SET_REPO_DATA","CLEAR_REPO_DATA","setRepoData","data","type","clearRepoData","SET_STARRED_DATA","combineReducers","apiCallStatus","state","action","repoData","starredData","TabPanel","children","value","index","other","role","hidden","id","aria-labelledby","Box","Typography","component","BASE_URL","handleRetrieveRepoData","url","selectedLanguage","fromDate","dispatch","a","fetch","then","response","json","items","catch","error","hocChain","compose","connect","actionCallRepoApi","handleChange","React","useState","changeLanguage","AppBar","position","className","Tabs","onChange","aria-label","Tab","label","FormControl","InputLabel","Select","labelId","event","target","MenuItem","loaderClass","css","actionSetStarredData","actionClearStarredData","repository","name","description","html_url","stargazers_count","starred","setStarred","useEffect","isStarred","find","repo","Card","key","CardContent","Rating","max","newValue","selectedStarredData","filter","handleClick","href","rel","size","color","loading","map","length","Content","tabValue","setTabValue","Fragment","RepoApp","this","props","Component","Boolean","window","location","hostname","match","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.7f59d09d.chunk.js","sourcesContent":["export const SET_REPO_DATA = 'modules/repo-app/SET_REPO_DATA';\nexport const CLEAR_REPO_DATA = 'modules/repo-app/CLEAR_REPO_DATA';\n\nexport const setRepoData = data => ({\n    type: SET_REPO_DATA,\n    data,\n});\n\nexport const clearRepoData = () => ({\n    type: CLEAR_REPO_DATA,\n});\n\nexport const repoDataReducer = (state = [], action = { type: 'NULL_ACTION'}) => {\n    switch (action.type){\n        case SET_REPO_DATA:\n            return action.data;\n        case CLEAR_REPO_DATA:\n            return [];\n        default:\n            return state;               \n    }\n};","export const SET_STARRED_DATA = 'modules/repo-app/SET_STARRED_DATA';\nexport const CLEAR_STARRED_DATA = 'modules/repo-app/CLEAR_STARRED_DATA';\n\nexport const setStarredData = data => ({\n    type: SET_STARRED_DATA,\n    data,\n});\n\nexport const clearStarredData = () => ({\n    type: CLEAR_STARRED_DATA,\n});\n\nexport const starredDataReducer = (state = [], action = { type: 'NULL_ACTION'}) => {\n    switch (action.type){\n        case SET_STARRED_DATA:\n            return action.data;\n        case CLEAR_STARRED_DATA:\n            return [];\n        default:\n            return state;               \n    }\n};","import { combineReducers } from 'redux';\nimport { apiCallStatusReducer as apiCallStatus } from '../ducks/apiCallStatus';\nimport { repoDataReducer as repoData } from '../ducks/repoData';\nimport { starredDataReducer as starredData } from '../ducks/starredData';\n\nexport default combineReducers({\n    apiCallStatus,\n    repoData,\n    starredData,\n})","import { \n    API_CALL_STATUS_SUCCESS, API_CALL_STATUS_ERROR, API_CALL_STATUS_LOADING\n} from '../constants/status';\n\nexport const SET_API_CALL_STATUS_SUCCESS = 'modules/repo-app/SET_API_CALL_STATUS_SUCCESS';\nexport const SET_API_CALL_STATUS_LOADING = 'modules/repo-app/SET_API_CALL_STATUS_LOADING';\nexport const SET_API_CALL_STATUS_ERROR = 'modules/repo-app/SET_API_CALL_STATUS_ERROR';\n\nexport const setApiCallStatusSuccess = () => ({\n    type: SET_API_CALL_STATUS_SUCCESS,\n});\n\nexport const setApiCallStatusLoading = () => ({\n    type: SET_API_CALL_STATUS_LOADING,\n});\n\nexport const setApiCallStatusError = () => ({\n    type: SET_API_CALL_STATUS_ERROR,\n});\n\nexport const apiCallStatusReducer = (state = '', action = { type: 'NULL_ACTION'}) => {\n    switch (action.type){\n        case SET_API_CALL_STATUS_SUCCESS:\n            return API_CALL_STATUS_SUCCESS;\n        case SET_API_CALL_STATUS_LOADING:\n            return API_CALL_STATUS_LOADING;\n        case SET_API_CALL_STATUS_ERROR:\n            return API_CALL_STATUS_ERROR;\n        default:\n            return state;               \n    }\n};","export const API_CALL_STATUS_SUCCESS = \"SUCCESS\";\nexport const API_CALL_STATUS_LOADING = \"LOADING\";\nexport const API_CALL_STATUS_ERROR = \"ERROR\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\nconst TabPanel = ({\n    children, value, index, ...other\n}) => (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`tabpanel-${index}`}\n      aria-labelledby={`tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box>\n          <Typography component={'span'}>{children}</Typography>\n        </Box>\n      )}\n    </div>\n);\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nexport default TabPanel;","export const BASE_URL = 'https://api.github.com/search/repositories';\nexport const DEFAULT_SORT = 'stars';\nexport const DEFAULT_ORDER = 'desc';","import { \n    setApiCallStatusError, setApiCallStatusLoading, setApiCallStatusSuccess\n} from '../ducks/apiCallStatus';\nimport { setRepoData, clearRepoData } from '../ducks/repoData';\n\nimport { \n    BASE_URL, DEFAULT_ORDER, DEFAULT_SORT\n} from '../constants/apiInfo';\n\nconst handleRetrieveRepoData = (selectedLanguage = '') => {\n    const fromDate = '2020-09-01';\n    let url;\n    if(selectedLanguage) {\n        url = BASE_URL+'?q=created:>'+fromDate+'+language:'+selectedLanguage+'&sort='+DEFAULT_SORT+'&order='+DEFAULT_ORDER;\n    } else {\n        url = BASE_URL+'?q=created:>'+fromDate+'&sort='+DEFAULT_SORT+'&order='+DEFAULT_ORDER;\n    }\n    \n    return async (dispatch) =>{\n        dispatch(setApiCallStatusLoading());\n        fetch(url)\n        .then(response => response.json())\n        .then(({ items = [] }) => {\n            dispatch(clearRepoData());\n            dispatch(setRepoData(items));\n            dispatch(setApiCallStatusSuccess());\n        })\n        .catch(error => dispatch(setApiCallStatusError()));\n    }\n}\n\nexport default handleRetrieveRepoData;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport handleRetrieveRepoData from '../../thunks/handleRetrieveRepoData';\nimport '../RepoApp.scss';\n\nconst TabHeader = ({ handleChange, value, actionCallRepoApi }) => {\n    const [selectedLanguage, changeLanguage] = React.useState('');\n    const handleChangeLanguage = (event) => {\n        const selectedLanguage = event.target.value;\n        changeLanguage(selectedLanguage);\n        actionCallRepoApi(selectedLanguage);\n    };\n    return (\n        <AppBar position=\"static\">\n        <div className=\"container-head\">\n            <div className=\"tabs\">\n                <Tabs value={value} onChange={handleChange} aria-label=\"tabs\">\n                    <Tab label=\"Result\" id = \"tab-1\" />\n                    <Tab label=\"Starred\" id = \"tab-2\" />\n                </Tabs>\n            </div>\n            <div className=\"language-selector\">\n                <FormControl className=\"cus-fields\">\n                    <InputLabel id=\"label\">Language</InputLabel>\n                    <Select\n                        labelId=\"language\"\n                        id=\"select-language\"\n                        value={selectedLanguage}\n                        onChange={handleChangeLanguage}\n                    >\n                        <MenuItem value='Java'>Java</MenuItem>\n                        <MenuItem value='C++'>C++</MenuItem>\n                        <MenuItem value='Javascript'>Javascript</MenuItem>\n                        <MenuItem value='Python'>Python</MenuItem>\n                    </Select>\n                </FormControl>    \n            </div>\n        </div>    \n        </AppBar>\n    )\n}\n\nTabHeader.propTypes = {\n    handleChange: PropTypes.func.isRequired,\n    actionCallRepoApi: PropTypes.func.isRequired,\n    value: PropTypes.number.isRequired,\n}\n\nconst mapDispatchAsProps = dispatch => {\n    return {\n        actionCallRepoApi: (value) => dispatch(handleRetrieveRepoData(value)),\n    };\n}\n\nconst hocChain = compose(\n    connect(null, mapDispatchAsProps),\n);\n\nexport { TabHeader as TestableTabHeader };\n\nexport default hocChain(TabHeader);","import { css } from \"@emotion/core\";\n\nexport const loaderClass = css`\n  display: block;\n  margin: 170px auto;\n  border-color: red;\n`;\nexport const loaderSize = 60;\nexport const loaderColor = '#123abc';","import React, { useState, useEffect } from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport '../RepoApp.scss';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport Rating from '@material-ui/lab/Rating';\nimport { setStarredData, clearStarredData } from '../../ducks/starredData';\n\nconst RepoCardContent = ({ \n    repository, \n    actionSetStarredData, \n    starredData,\n    actionClearStarredData \n}) =>{\n    const {\n        id,\n        name,\n        description,\n        html_url,\n        stargazers_count,\n      } = repository;\n    const [starred, setStarred] = useState({});\n    useEffect(() => {\n        let isStarred = starredData.find((repo) => repo.id === id);\n        isStarred ? setStarred(1) : setStarred(null);\n    }, [starredData, id]);\n\n    const handleClick = (event, newValue, id) => {\n        setStarred(newValue);\n        if (newValue) {\n            const selectedStarredData = [...starredData, repository];\n            actionSetStarredData(selectedStarredData);\n        }else {\n            const selectedStarredData = starredData.filter(repo => repo.id !== id);\n            actionClearStarredData();\n            actionSetStarredData(selectedStarredData);\n        }\n    }\n    \n    return (\n        <Card className=\"card-container\" key={id}>\n            <CardContent>\n                <Rating\n                    name={`rating-card-${id}`}\n                    max={1}\n                    onChange={(event, newValue) => handleClick(event, newValue, id)}\n                    value={starred ? 1: 0}\n                />\n\n                <div className=\"first-section\">\n                    <div className=\"heading-label\">{name}</div>\n                    <div className=\"description\">{description}</div>\n                </div>\n                \n                <div className=\"star-count\">\n                    <hr/>\n                        {stargazers_count} stars\n                    <hr/> \n                </div>\n\n                <div className=\"url\">\n                    <a href={html_url} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <GitHubIcon/>Github Repo\n                    </a>\n                </div>         \n            </CardContent>   \n        </Card>\n    )\n};\n\nRepoCardContent.propTypes = {\n    actionSetStarredData: PropTypes.func.isRequired,\n    actionClearStarredData: PropTypes.func.isRequired,\n    starredData:PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n        description: PropTypes.string,\n        html_url: PropTypes.string,\n        stargazers_count: PropTypes.number,\n    })).isRequired,\n    repository: PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n        description: PropTypes.string,\n        html_url: PropTypes.string,\n        stargazers_count: PropTypes.number,\n    }).isRequired,\n};\n\nconst mapDispatchAsProps = dispatch => {\n    return {\n        actionSetStarredData: (value) => dispatch(setStarredData(value)),\n        actionClearStarredData: () => dispatch(clearStarredData()),\n    };\n}\n\nconst mapStateToProps = state => ({\n    starredData: state.starredData,\n});\n\nconst hocChain = compose(\n    connect(mapStateToProps, mapDispatchAsProps),\n);\n\nexport { RepoCardContent as TestableRepoCardContent };\n  \nexport default hocChain(RepoCardContent);","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport RingLoader from \"react-spinners/RingLoader\";\nimport { loaderClass, loaderSize, loaderColor } from '../../constants/loaderClass';\nimport RepoCardContent from \"./RepoCardContent\";\nimport { API_CALL_STATUS_LOADING } from '../../constants/status';\n\nconst RepoCardPage = ({ repoData, apiCallStatus }) => (\n    <div className=\"main-card\">\n        <RingLoader\n            css={loaderClass}\n            size={loaderSize}\n            color={loaderColor}\n            loading={apiCallStatus === API_CALL_STATUS_LOADING ? true: false}\n        />  \n        {\n            repoData.map((repository) => {\n                return <RepoCardContent repository={repository} key={repository.id} />;\n            })\n        }\n    </div>    \n);\n\nRepoCardPage.propTypes = {\n    apiCallStatus: PropTypes.string.isRequired,\n    repoData: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n        description: PropTypes.string,\n        html_url: PropTypes.string,\n        stargazers_count: PropTypes.number,\n    })).isRequired,\n};\n\nconst mapStateToProps = state => ({\n    repoData: state.repoData,\n    apiCallStatus: state.apiCallStatus,\n});\n\nconst hocChain = compose(\n    connect(mapStateToProps),\n);\n\nexport { RepoCardPage as TestableRepoCardPage };\n  \nexport default hocChain(RepoCardPage);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport Rating from '@material-ui/lab/Rating';\nimport '../RepoApp.scss';\n\nconst StarredCardPage = ({ starredData }) => (\n    <div className=\"main-card\">\n        { starredData.length > 0 && starredData.map(\n            ({\n                id,\n                name,\n                description,\n                html_url,\n                stargazers_count,\n            })=>{   \n                return (\n                    <Card className=\"card-container\" key={id}>\n                        <CardContent>\n                            <Rating\n                                name={`rating-card-${id}`}\n                                max={1}\n                                value={1}\n                            />\n                \n                            <div className=\"first-section\">\n                                <div className=\"heading-label\">{name}</div>\n                                <div className=\"description\">{description}</div>\n                            </div>\n                        \n                            <div className=\"star-count\">\n                                <hr/>\n                                    {stargazers_count} stars\n                                <hr/> \n                            </div>\n        \n                            <div className=\"url\">\n                                <a href={html_url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                    <GitHubIcon/>Github Repo\n                                </a>\n                            </div>         \n                        </CardContent>   \n                    </Card>               \n                )\n            }    \n        )}\n    </div>\n);\n\nStarredCardPage.propTypes = {\n    starredData:PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n        description: PropTypes.string,\n        html_url: PropTypes.string,\n        stargazers_count: PropTypes.number,\n    })).isRequired,\n};\n\nconst mapStateToProps = state => ({\n    starredData: state.starredData,\n});\n\nconst hocChain = compose(\n    connect(mapStateToProps),\n);\n\nexport { StarredCardPage as TestableStarredCardPage };\n  \nexport default hocChain(StarredCardPage);","import React from 'react';\nimport TabPanel from '../Tabs/TabPanel';\nimport TabHeader from '../Tabs/TabHeader';\nimport RepoCardPage from './RepoCardPage';\nimport StarredCardPage from './StarredCardPage';\nimport '../RepoApp.scss';\n\nconst Content = () => {\n  const [tabValue, setTabValue] = React.useState(0);\n  return (\n    <React.Fragment>\n      <TabHeader value={tabValue} handleChange={(event, newValue)=>{setTabValue(newValue)}} />\n      <TabPanel value={tabValue} index={0}>\n          <RepoCardPage />  \n      </TabPanel>\n      <TabPanel value={tabValue} index={1}>\n          <StarredCardPage />\n      </TabPanel>\n    </React.Fragment>\n  );\n}\n\nexport default Content;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport Content from './Content/Content';\nimport handleRetrieveRepoData from '../thunks/handleRetrieveRepoData';\n\nclass RepoApp extends React.Component{\n    componentDidMount(){\n        const { actionCallRepoApi } = this.props;\n        actionCallRepoApi();\n    }\n\n    render(){\n        return (\n            <React.Fragment>\n                <Content />\n            </React.Fragment>    \n        )\n    }\n}\n\nRepoApp.propTypes = {\n    actionCallRepoApi: PropTypes.func.isRequired,\n};\n\nconst mapDispatchAsProps = dispatch => {\n    return {\n        actionCallRepoApi: () => dispatch(handleRetrieveRepoData()),\n    };\n}\n\nconst hocChain = compose(\n    connect(null, mapDispatchAsProps),\n);\n\nexport { RepoApp as TestableRepoApp };\n\nexport default hocChain(RepoApp);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/index';\nimport RepoApp from './components/RepoApp';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <RepoApp />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}